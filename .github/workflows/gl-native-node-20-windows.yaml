name: gl-native-node Windows Build - Node 20

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2019

    strategy:
      fail-fast: false
      matrix:
        target-cpu: [x64]
        target-os: [win]

    steps:
      - name: Support long paths
        run: git config --system core.longpaths true
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.2

      - name: Checkout gl-native-node
        uses: actions/checkout@v4
        with:
            repository: 'mhalada/gl-native-node'
            token: ${{ secrets.GH_PAT }}
            path: gl-native-node

      - name: Checkout libimagequant dependency
        uses: actions/checkout@v4
        with:
            repository: 'ImageOptim/libimagequant'
            ref: '2.17.0'
            path: gl-native-node/vendor/libimagequant

      - name: Checkout mapbox-gl-native dependency
        uses: actions/checkout@v4
        with:
            repository: 'mhalada/mapbox-gl-native-private'
            ref: 'maptiler'
            path: gl-native-node/vendor/mapbox-gl-native
            token: ${{ secrets.GH_PAT }}
            submodules: 'recursive'

      - name: Checkout custom boost dependency
        uses: actions/checkout@v4
        with:
            repository: 'mhalada/mapbox-gl-native-boost'
            ref: 'maptiler'
            path: gl-native-node/vendor/mapbox-gl-native/vendor/boost
            token: ${{ secrets.GH_PAT }}

      - name: Setup LIBS_DIR
        run: |
          mkdir gl-native-node\dist, dependencies\apps, dependencies\bin, dependencies\include, dependencies\lib
          echo "LIBS_DIR=$(Get-Item .)\dependencies" >> $env:GITHUB_ENV

      - name: Download libwebp dependency
        run: |
          curl -o libwebp.zip https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.3.0-windows-x64.zip
          mkdir libwebp
          tar -xf libwebp.zip -C libwebp
          copy libwebp\libwebp-1.3.0-windows-x64\lib\libwebp.lib dependencies\lib\libwebp.lib
          copy libwebp\libwebp-1.3.0-windows-x64\lib\libwebp.lib gl-native-node\dist\libwebp.lib
          robocopy libwebp\libwebp-1.3.0-windows-x64\include dependencies\include /e
          if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }

      - name: Download GDAL SDK dependency
        run: |
          curl -o release-1911-x64-dev.zip https://download.gisinternals.com/sdk/downloads/release-1911-x64-dev.zip
          mkdir release-1911-x64-dev
          tar -xf release-1911-x64-dev.zip -C release-1911-x64-dev
          robocopy release-1911-x64-dev\release-1911-x64\bin dependencies\bin /e
          robocopy release-1911-x64-dev\release-1911-x64\include dependencies\include /e
          robocopy release-1911-x64-dev\release-1911-x64\lib dependencies\lib /e
          if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }

      - name: Download ANGLE dependency
        run: |
          curl -L -o angle.zip https://github.com/mhalada/angle-builds/releases/download/v0.0.1/angle-${{ matrix.target-cpu }}-win.zip
          mkdir angle
          tar -xf angle.zip -C angle
          copy angle\libEGL.dll dependencies\lib\libEGL.dll
          copy angle\libGLESv2.dll dependencies\lib\libGLESv2.dll
          copy angle\libEGL.dll gl-native-node\dist\libEGL.dll
          copy angle\libGLESv2.dll gl-native-node\dist\libGLESv2.dll

          copy angle\libEGL.dll.lib dependencies\lib\libEGL.lib
          copy angle\libGLESv2.dll.lib dependencies\lib\libGLESv2.lib
          copy angle\libEGL.dll.lib gl-native-node\dist\libEGL.lib
          copy angle\libGLESv2.dll.lib gl-native-node\dist\libGLESv2.lib
          robocopy angle\include dependencies\include /e
          if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }

      - name: Download libuv dependency
        run: |
          mkdir libuv
          cd libuv
          curl -o libuv.zip https://dist.libuv.org/dist/v1.18.0/libuv-x64-v1.18.0.build20.exe
          7z x libuv.zip
          cd ..
          copy libuv\libuv.dll dependencies\lib\libuv.dll
          copy libuv\libuv.lib dependencies\lib\libuv.lib
          robocopy libuv\include dependencies\include /e
          if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }

      # - name: Install LLVM and Clang
      #   uses: KyleMayes/install-llvm-action@v2
      #   with:
      #     version: "11.0.1"
      #     env: true

      # - name: Install LLVM
      #   run: |
      #     $llvmVersion = "11.0.1"
      #     $exePath = "$env:temp\LLVM-$llvmVersion-win64.exe"
      #     (New-Object Net.WebClient).DownloadFile("https://github.com/llvm/llvm-project/releases/download/llvmorg-$llvmVersion/LLVM-$llvmVersion-win64.exe", $exePath)
      #     cmd /c start /wait $exePath /S
      #     echo "$env:ProgramFiles\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      #     cmd /c clang --version
      #     copy Directory.build.props gl-native-node\Directory.build.props

      #     # $vsixPath = "$env:TEMP\llvm.vsix"
      #     # Write-Host "Downloading llvm.vsix..."
      #     # (New-Object Net.WebClient).DownloadFile('https://llvmextensions.gallerycdn.vsassets.io/extensions/llvmextensions/llvm-toolchain/1.0.363769/1560930595399/llvm.vsix', $vsixPath)

      #     # $vsPath = "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise"
      #     # Start-Process "$vsPath\Common7\IDE\VSIXInstaller.exe" "/q /a $vsixPath" -Wait
      #     # Remove-Item $vsixPath -Force -ErrorAction Ignore
      #     # Write-Host "Installed" -ForegroundColor Green

      #     ./install_vs_llvm_toolset.bat

      - name: Build gl-native-node
        working-directory: gl-native-node
        run: |
          echo $env:LIBS_DIR
          echo $env:GITHUB_PATH
          echo $env:PATH
          # $env:PATH = ($env:PATH -split ';' | Where-Object { $_ -ne 'C:\Program Files\LLVM\bin' }) -join ';'
          npm install -g cmake-js node-addon-api
          $env:NODE_PATH = "C:\npm\prefix\node_modules"
          ./build.bat

      - name: Artifact Preparation
        working-directory: gl-native-node
        run: |
          mkdir ../output
          copy mbgl-server.node ../output/mbgl-win32-${{ matrix.target-cpu }}.node
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gl-native-node-${{ matrix.target-cpu }}-${{ matrix.target-os }}
          path: output/
          retention-days: 1
